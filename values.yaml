# Runtime configuration for Synapse and settings related to the Matrix protocol
matrix:
  serverName: matrix.kube.zress.io
  telemetry: false
  presence: true
  blockNonAdminInvites: true
  search: true
  encryptByDefault: all
  adminEmail: "admin@zress.io"
  uploads:
    maxSize: 100M
    maxPixels: 32M
  federation:
    enabled: true
    allowPublicRooms: true
    # whitelist: []
    blacklist:
      - "127.0.0.0/8"
      - "10.0.0.0/8"
      - "172.16.0.0/12"
      - "192.168.0.0/16"
      - "100.64.0.0/10"
      - "169.254.0.0/16"
      - "::1/128"
      - "fe80::/64"
      - "fc00::/7"
  registration:
    enabled: false
    allowGuests: false
    # required3Pids:
    #   - email
    #   - msisdn
    autoJoinRooms: []
    # - "#welcome:zress.io"
  urlPreviews:
    enabled: true
    rules:
      maxSize: 10M
      ip:
        # whitelist:
        blacklist:
          - "127.0.0.0/8"
          - "10.0.0.0/8"
          - "172.16.0.0/12"
          - "192.168.0.0/16"
          - "100.64.0.0/10"
          - "169.254.0.0/16"
          - "::1/128"
          - "fe80::/64"
          - "fc00::/7"
      url: {}

  retentionPeriod: 7d
  security:
    # macaroonSecretKey: <PRIVATE STRING>
    surpressKeyServerWarning: true
  disabled: false
  disabledMessage: ""
  logging:
    rootLogLevel: WARNING
    sqlLogLevel: WARNING
    synapseLogLevel: WARNING

  authentication:
    internal: false
    oidc:
      enabled: true
      discover: true
      issuer: "https://auth.kube.zress.io/auth/realms/system-zero"
      client_id: "matrix.kube.zress.io"
      client_secret: "8a6d6555-3e44-453f-a5a3-b746ce512ee8"
      client_auth_method: client_secret_basic
      scopes: ["openid", "profile"]
      authorization_endpoint: "https://auth.kube.zress.io/auth/realms/system-zero/protocol/openid-connect/auth"
      token_endpoint: "https://auth.kube.zress.io/auth/realms/system-zero/protocol/openid-connect/token"
      userinfo_endpoint: "https://auth.kube.zress.io/auth/realms/system-zero/protocol/openid-connect/userinfo"
      skip_verification: false
      user_mapping_provider:
        config:
          subject_claim:

volumes:
  media:
    capacity: 10Gi
    storageClass: rook-ceph-fs
  signingKey:
    capacity: 1Gi
    storageClass: rook-ceph-fs

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: "external"
    cert-manager.io/cluster-issuer: "letsencrypt-production"
  hosts:
    synapse: matrix.kube.zress.io
    riot: element.kube.zress.io
    federation: matrix-fed.kube.zress.io
  tls:
    - hosts:
        - matrix.kube.zress.io
        - element.kube.zress.io
        - matrix-fed.kube.zress.io
      secretName: matrix-cert

postgresql:
  enabled: true
  username: matrix
  password: matrix
  database: matrix
  hostname: ""
  port: 5432
  ssl: false
  sslMode: prefer
  persistence:
    size: 8Gi
  initdbScriptsConfigMap: "{{ .Release.Name }}-postgresql-initdb"
  securityContext:
    enabled: true
    runAsUser: 1000
    fsGroup: 1000

synapse:
  image:
    repository: "matrixdotorg/synapse"
    tag: v1.22.1
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8008
    federation:
      type: ClusterIP
      port: 80
  replicaCount: 1
  resources: {}
  probes:
    readiness:
      timeoutSeconds: 5
      periodSeconds: 10
    startup:
      timeoutSeconds: 5
      periodSeconds: 5
      failureThreshold: 6
    liveness:
      timeoutSeconds: 5
      periodSeconds: 10
  labels:
    component: synapse
  metrics:
    enabled: true
    port: 9092
    annotations: true

riot:
  enabled: true
  branding:
    brand: "System Zero"
    welcomeBackgroundUrl: ""
    authHeaderLogoUrl: ""
    authFooterLinks: []
  #   welcomeBackgroundUrl: "https://zress.io/sysz.png"
  #   authHeaderLogoUrl: "https://zress.io/sysz-logo.svg"
  #   authFooterLinks:
  #     - text: System Zero
  #       url: https://zress.io

  integrations:
    enabled: true
    ui: "https://scalar.vector.im/"
    api: "https://scalar.vector.im/api"
    widgets:
      - "https://scalar.vector.im/_matrix/integrations/v1"
      - "https://scalar.vector.im/api"
      - "https://scalar-staging.vector.im/_matrix/integrations/v1"
      - "https://scalar-staging.vector.im/api"
      - "https://scalar-staging.riot.im/scalar/api"

  labs:
    - feature_new_spinner
    - feature_pinning
    - feature_custom_status
    - feature_custom_tags
    - feature_state_counters
    - feature_many_integration_managers
    - feature_mjolnir
    - feature_dm_verification
    - feature_bridge_state
    - feature_presence_in_room_list
    - feature_custom_themes

  roomDirectoryServers: []

  welcomeUserId: ""

  permalinkPrefix: "https://matrix.kube.zress.io"

  image:
    repository: "vectorim/riot-web"
    tag: v1.7.12
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 80
  replicaCount: 1
  resources: {}
  probes:
    readiness: {}
    startup: {}
    liveness: {}
  labels:
    component: element

coturn:
  enabled: true

  uris:
    - "turn:turn.kube.zress.io?transport=udp"
    - "turn:turn.dev.zress.io?transport=udp"
  kind: DaemonSet
  allowGuests: true

  sharedSecret: "sdgnogh89y9ygdhsiuhkjJBDF8890022kbpp"

  ports:
    from: 49152
    to: 49172

  service:
    type: ClusterIP

  image:
    repository: "instrumentisto/coturn"
    tag: "4.5.1.3"
    pullPolicy: IfNotPresent
  replicaCount: 1
  resources: {}
  labels:
    component: coturn

mail:
  enabled: true
  from: "admin@zress.io"
  relay:
    enabled: false
    image:
      repository: "devture/exim-relay"
      tag: "4.94.2-r0-2"
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      port: 25
    replicaCount: 1
  resources: {}
  probes:
    readiness: {}
    startup: {}
    liveness: {}
    labels:
      component: mail
  external:
    host: "mail.zress.io"
    port: 587
    username: "admin@zress.io"
    password: "Br2HZCKywmJq63"
    requireTransportSecurity: true

bridges:
  irc:
    enabled: false
    presence: false
    database: "matrix_irc"
    databaseSslVerify: true
    servers:
      chat.freenode.net:
        name: "Freenode"
        port: 6697
        ssl: true
    data:
      capacity: 1Gi
      storageClass: rook-ceph-fs
    image:
      repository: "matrixdotorg/matrix-appservice-irc"
      tag: "release-0.22.0-rc1"
      pullPolicy: IfNotPresent
    replicaCount: 1
    resources: {}
    service:
      type: ClusterIP
      port: 9006

  whatsapp:
    enabled: true
    # Username and display name of the WhatsApp bridge bot
    bot:
      username: "whatsappbot"
      displayName: "WhatsApp bridge bot"
      avatar: "mxc://maunium.net/NeXNQarUbrlYBiPCpprYsRqr"
    # Permissions for using the bridge.
    # Permitted values:
    # relaybot - Talk through the relaybot (if enabled), no access otherwise
    #     user - Access to use the bridge to chat with a WhatsApp account.
    #    admin - User level and some additional administration tools
    # Permitted keys:
    #        * - All Matrix users
    #   domain - All users on that homeserver
    #     mxid - Specific user
    permissions: ["*": relaybot, "*": user, "*": admin]

    connection:
      timeout: 20
      qrRegenCount: 2
      maxAttempts: 3
      retryDelay: -1
      reportRetry: true

    callNotices: true

    users:
      username: "whatsapp_{{.}}"
      displayName: "{{if .Notify}}{{.Notify}}{{else}}{{.Jid}}{{end}} (WA)"
    communityName: "whatsapp_{{.Localpart}}={{.Server}}"

    relaybot:
      enabled: true
      management: "!mgt:matrix.kube.zress.io"
      invites: []

    data:
      capacity: 1Gi
      storageClass: rook-ceph-fs
      accessMode: ReadWriteMany

    image:
      repository: "dock.mau.dev/tulir/mautrix-whatsapp"
      tag: "latest"
      pullPolicy: Always

    replicaCount: 1
    resources: {}
    service:
      type: ClusterIP
      port: 29318

  discord:
    enabled: false
    # Discord bot authentication
    # See https://github.com/Half-Shot/matrix-appservice-discord#setting-up-discord
    auth:
      clientId: ""
      botToken: ""
    # The name of bridged rooms
    # Available vars:
    #   :guild - guild/server name
    #   :name  - channel name prefixed with #
    channelName: "[Discord] :guild :name"
    users:
      # Nickname of bridged Discord users
      # Available vars:
      #   :nick     - user's Discord nickname
      #   :username - user's Discord username
      #   :tag      - user's 4 digit Discord tag
      #   :id       - user's Discord developer ID (long)
      nickname: ":nick"
      # Username of bridged Discord users
      # Available vars:
      #   :username - user's Discord username
      #   :tag      - user's 4 digit Discord tag
      #   :id       - user's Discord developer ID (long)
      username: ":username#:tag"
    # Set to false to disable online/offline presence for Discord users
    presence: true
    # Set to false to disable typing notifications (only for Discord to Matrix)
    typingNotifications: true
    # Set to true to allow users to bridge rooms themselves using !discord commands
    # More info: https://t2bot.io/discord
    selfService: false
    # Set to false to disable the Discord bot read receipt, which advances whenever the bot bridges a message
    readReceipt: true
    # Set to false to disable Discord notifications when a user joins/leaves the Matrix channel
    joinLeaveEvents: true
    # Default visibility of bridged rooms (public/private)
    defaultVisibility: public
    data:
      capacity: 1Gi
      storageClass: rook-ceph-fs
    image:
      repository: "halfshot/matrix-appservice-discord"
      tag: "latest"
      pullPolicy: Always
    replicaCount: 1
    resources: {}
    service:
      type: ClusterIP
      port: 9005
  affinity: false
  volume:
    capacity: 1Gi
    storageClass: rook-ceph-fs
    accessMode: ReadWriteMany

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

networkPolicies:
  enabled: true
